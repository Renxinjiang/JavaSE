所谓异常指的就是程序在运行时，出现错误时通知调用者的一种机制.
1、防御式编程
错误在代码中是客观存在的. 因此我们要让程序出现问题的时候及时通知程序猿. 我们有两种主要的方式：
LBYL: Look Before You Leap. 在操作之前就做充分的检查.
EAFP: It's Easier to Ask Forgiveness than Permission. "事后获取原谅比事前获取许可更容易". 也就是先操作, 遇到问题再处理.
LBYL风格代码（不使用异常）：
boolean ret = false;
ret = 登陆游戏();
if (!ret) {
    处理登陆游戏错误;
    return;
}
ret = 开始匹配();
if (!ret) {
    处理匹配错误;
    return;
}
ret = 游戏确认();
if (!ret) {
    处理游戏确认错误;
    return;
}
ret = 选择英雄();
if (!ret) {
    处理选择英雄错误;
    return;
}
ret = 载入游戏画面();
if (!ret) {
    处理载入游戏错误;
    return;
}
......


EAFP风格代码（使用异常）：
try {
    登陆游戏();
    开始匹配();
    游戏确认();
    选择英雄();
    载入游戏画面();
...
} catch (登陆游戏异常) {
    处理登陆游戏异常;
} catch (开始匹配异常) {
    处理开始匹配异常;
} catch (游戏确认异常) {
    处理游戏确认异常;
} catch (选择英雄异常) {
    处理选择英雄异常;
} catch (载入游戏画面异常) {
    处理载入游戏画面异常;
}
......

使用第一种方式, 正常流程和错误处理流程代码混在一起, 代码整体显的比较混乱.
而第二种方式正常流程和错误流程是分离开的, 更容易理解代码.
2、异常的基本用法
2.1 抛出异常
throw 异常对象
//空指针异常
throw new NullPointerException();

2.2 捕获异常
基本语法：
try{
    有可能出现异常的语句 ;
}[catch (异常类型 异常对象) {
} ... ]
[finally {
    异常的出口
}]


try 代码块中放的是可能出现异常的代码.
catch 代码块中放的是出现异常后的处理行为.
finally 代码块中的代码用于处理善后工作, 会在最后执行.
其中 catch 和 finally 都可以根据情况选择加或者不加.
一旦 try 中出现异常, 那么 try 代码块中的程序就不会继续执行, 而是交给 catch 中的代码来执行. catch执行完毕会继续往下执行；
catch 只能处理对应种类的异常；
一段代码可能会抛出多种不同的异常, 不同的异常有不同的处理方式. 因此可以搭配多个 catch 代码块；
finally 表示最后的善后工作, 例如释放资源；
无论是否存在异常, finally 中的代码一定都会执行到；
如果本方法中没有合适的处理异常的方式, 就会沿着调用栈向上传递；
如果向上一直传递都没有合适的方法处理异常, 最终就会交给 JVM 处理, 程序就会异常终止(和我们最开始未使用 try catch 时是一样的)；

注:
catch 进行类型匹配的时候, 不光会匹配相同类型的异常对象, 也会捕捉目标异常类型的子类对象.
如 NullPointerException 和 ArrayIndexOutOfBoundsException 都是 Exception 的子类, 因此
都能被捕获到.

异常的处理方式：
对于比较严重的问题(例如和算钱相关的场景), 应该让程序直接崩溃, 防止造成更严重的后果
对于不太严重的问题(大多数场景), 可以记录错误日志, 并通过监控报警程序及时通知程序猿
对于可能会恢复的问题(和网络相关的场景), 可以尝试进行重试.

finally：
finally 执行的时机是在方法返回之前(try 或者 catch 中如果有 return 会在这个 return 之前执行 finally). 但是如果finally 中也存在 return 语句, 那么就会执行 finally 中的 return, 从而不会执行到 try 中原有的 return.
一般我们不建议在 finally 中写 return (被编译器当做一个警告).

2.3 定义异常（定义一个类，来自接口Throwable）

                                            	NoSuchElementException
   NullPointerException

顶层类 Throwable 派生出两个重要的子类, Error 和 Exception
其中 Error 指的是 Java 运行时内部错误和资源耗尽错误. 应用程序不抛出此类异常. 这种内部错误一旦出现，除了告知用户并使程序终止之外, 再无能无力. 这种情况很少出现.不catch
Exception 是我们程序猿所使用的异常类的父类.
其中 Exception 有一个子类称为 RuntimeException , 这里面又派生出很多我们常见的异常类
 NullPointerException , IndexOutOfBoundsException 等.这是程序员导致的BUG，一般不catch
重点：
非受查异常：派生于 Error 类或 RuntimeException 类的所有异常，（不catch）
受查异常：所有的其他异常（Exception的子类，不包含RuntimeException的子类）
如果一段代码可能抛出 受查异常, 那么必须显式进行处理（方法声明中给出一个异常列表说明）。
public static void login(String userName, String password) throws UserError,PasswordError {
    if (!Test.userName.equals(userName)) {
        throw new UserError("用户名错误");
    }
    if (!Test.password.equals(password)) {
        throw new PasswordError("密码错误");
    }
    System.out.println("登陆成功");
}

throws关键字
throws 异常类型，用逗号分隔


自定义异常通常会继承自 Exception 或者 RuntimeException
继承自 Exception 的异常默认是受查异常
继承自 RuntimeException 的异常默认是非受查异常.
2.4 异常处理流程
程序先执行 try 中的代码
如果 try 中的代码出现异常, 就会结束 try 中的代码, 看和 catch 中的异常类型是否匹配.
如果找到匹配的异常类型, 就会执行 catch 中的代码
如果没有找到匹配的异常类型, 就会将异常向上传递到上层调用者.
无论是否找到匹配的异常类型, finally 中的代码都会被执行到(在该方法结束之前执行).
如果上层调用者也没有处理的了异常, 就继续向上传递.
一直到 main 方法也没有合适的代码处理异常, 就会交给 JVM 来进行处理, 此时程序就会异常终止
3、理解异常
try角色：巡查员

throw角色：发现明确隐患，并且上报

catch角色：不同隐患的修理工

finally角色：最后签到

